module src/boards

import src/game

/*
0 0 0 0
0 1 1 1
0 1 B ?
0 1 ? B
*/
def simpleBoard1() = {
  var board = buildBoard(4, 4, Cons(XY(2,2),Cons(XY(3,3),Nil())))
  try {board.revealCell(XY(0,0))}
  with GameOver {()}
  board
}

/*
B ? ?
? 1 ?
? ? ?
*/
def simpleBoard2(): Board = {
  var board = buildBoard(3, 3, Cons(XY(0,0),Nil()))
  try {board.revealCell(XY(1,1))}
  with GameOver {()}
  board
}

/*
F 2 F
2 4 2
? ? ?
*/
def differenceBoard1() = {
  var board = buildBoard(3, 3, Cons(XY(0,0),Cons(XY(2,0),Cons(XY(0,2),Cons(XY(2,2),Nil())))))
  try {
    board.revealCell(XY(0,1))
    board.revealCell(XY(1,0))
    board.revealCell(XY(1,1))
    board.revealCell(XY(2,1))
  }
  with GameOver {()}
  board
}

/*
? ? ? ? ? ?
F 2 2 2 2 ?
1 1 0 0 2 ?
0 0 0 0 1 ?
*/
def differenceBoard2() = {
  var board = buildBoard(4, 6, Cons(XY(0,1),Cons(XY(2,0),Cons(XY(3,0),Cons(XY(5,1),Cons(XY(5,3),Nil()))))))
  try {board.revealCell(XY(0,3))}
  with GameOver {()}
  board
}

/*
B B ?
4 ? 2
B B ?
*/
def differenceBoard3() = {
  var board = buildBoard(3, 3, Cons(XY(0,0),Cons(XY(1,0),Cons(XY(0,2),Cons(XY(1,2),Nil())))))
  try {
    board.revealCell(XY(0,1))
    board.revealCell(XY(2,1))
  }
  with GameOver {()}
  board
}

/*
B ? 1
3 B ?
B ? ?
1 ? B
*/
def differenceBoard4() = {
  var board = buildBoard(4, 3, Cons(XY(0,0),Cons(XY(1,1),Cons(XY(0,2),Cons(XY(2,3),Nil())))))
  try {
    board.revealCell(XY(0,1))
    board.revealCell(XY(0,3))
    board.revealCell(XY(2,0))
  }
  with GameOver {()}
  board
}


/* Combining multiple difference checks
1 ? B
B 4 B
B ? 1
*/
def differenceBoard5() = {
  var board = buildBoard(3, 3, Cons(XY(0,1),Cons(XY(0,2),Cons(XY(2,0),Cons(XY(2,1),Nil())))))
  try {
    board.revealCell(XY(0,0))
    board.revealCell(XY(1,1))
    board.revealCell(XY(2,2))
  }
  with GameOver {()}
  board
}

/*
0 0 0
1 1 1
? B ?
*/
def subsetBoard1() = {
  var board = buildBoard(3, 3, Cons(XY(1,2),Nil()))
  try {board.revealCell(XY(0,0))}
  with GameOver {()}
  board
}

/*
0 0 0 0
1 1 1 1
B ? ? B
*/
def subsetBoard2() = {
  var board = buildBoard(3, 4, Cons(XY(0,2),Cons(XY(3,2),Nil())))
  try {board.revealCell(XY(0,0))}
  with GameOver {()}
  board
}

/* Combining multiple subset checks
1 ? ?
B 2 B
? ? 1
*/
def subsetBoard3() = {
  var board = buildBoard(3, 3, Cons(XY(0,1),Cons(XY(2,1),Nil())))
  try {
    board.revealCell(XY(0,0))
    board.revealCell(XY(1,1))
    board.revealCell(XY(2,2))
  }
  with GameOver {()}
  board
}

/*
? B 2 0
B B 2 0
2 2 1 0
0 0 0 0
*/
def surroundedBoard() = {
  var board = buildBoard(4, 4, Cons(XY(0,1),Cons(XY(1,1),Cons(XY(1,0),Nil()))))
  try {board.revealCell(XY(3,0))}
  with GameOver {()}
  board
}