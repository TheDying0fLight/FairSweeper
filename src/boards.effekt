module src/boards

import src/board
import src/utils

def beginnerBoard() = initializeBoard(9,9,10)
def intermediateBoard() = initializeBoard(16,16,40)
def expertBoard() = initializeBoard(16,30,99)

/*
0 0 0 0
0 1 1 1
0 1 B ?
0 1 ? B
*/
def simpleBoard1() = {
  var board = buildBoard(4, 4, [XY(2,2),XY(3,3)])
  board.revealCellEffectless(XY(0,0))
  board
}

/*
B ? ?
? 1 ?
? ? ?
*/
def simpleBoard2(): Board = {
  var board = buildBoard(3, 3, [XY(0,0)])
  board.revealCellEffectless(XY(1,1))
  board
}

/*
F 2 F
2 4 2
? ? ?
*/
def differenceBoard1() = {
  var board = buildBoard(3, 3, [XY(0,0),XY(2,0),XY(0,2),XY(2,2)])
  board.revealCellEffectless(XY(0,1))
  board.revealCellEffectless(XY(1,0))
  board.revealCellEffectless(XY(1,1))
  board.revealCellEffectless(XY(2,1))
  board
}

/*
? ? ? ? ? ?
F 2 2 2 2 ?
1 1 0 0 2 ?
0 0 0 0 1 ?
*/
def differenceBoard2() = {
  var board = buildBoard(4, 6, [XY(0,1),XY(2,0),XY(3,0),XY(5,1),XY(5,3)])
  board.revealCellEffectless(XY(0,3))
  board
}

/*
B B ?
4 ? 2
B B ?
*/
def differenceBoard3() = {
  var board = buildBoard(3, 3, [XY(0,0),XY(1,0),XY(0,2),XY(1,2)])
  board.revealCellEffectless(XY(0,1))
  board.revealCellEffectless(XY(2,1))
  board
}


/* Combining multiple difference checks
1 ? B
B 4 B
B ? 1
*/
def differenceBoard4() = {
  var board = buildBoard(3, 3, [XY(0,1),XY(0,2),XY(2,0),XY(2,1)])
  board.revealCellEffectless(XY(0,0))
  board.revealCellEffectless(XY(1,1))
  board.revealCellEffectless(XY(2,2))
  board
}

/*
0 0 0
1 1 1
? B ?
*/
def subsetBoard1() = {
  var board = buildBoard(3, 3, [XY(1,2)])
  board.revealCellEffectless(XY(0,0))
  board
}

/*
0 0 0 0
1 1 1 1
B ? ? B
*/
def subsetBoard2() = {
  var board = buildBoard(3, 4, [XY(0,2),XY(3,2)])
  board.revealCellEffectless(XY(0,0))
  board
}

/* Combining multiple subset checks
1 ? ?
B 2 B
? ? 1
*/
def subsetBoard3() = {
  var board = buildBoard(3, 3, [XY(0,1),XY(2,1)])
  board.revealCellEffectless(XY(0,0))
  board.revealCellEffectless(XY(1,1))
  board.revealCellEffectless(XY(2,2))
  board
}

/* Combining multiple subset checks
1 ? ?
B 2 B
1 ? ?
*/
def subsetBoard4() = {
  var board = buildBoard(3, 3, [XY(0,1),XY(2,1)])
  board.revealCellEffectless(XY(0,0))
  board.revealCellEffectless(XY(1,1))
  board.revealCellEffectless(XY(0,2))
  board
}

/*
? B 2 0
B B 2 0
2 2 1 0
0 0 0 0
*/
def surroundedBoard() = {
  var board = buildBoard(4, 4, [XY(0,1),XY(1,1),XY(1,0)])
  board.revealCellEffectless(XY(3,0))
  board
}

/*
B ? 1
3 B ?
B ? ?
1 ? B
*/
def countBoard1() = {
  var board = buildBoard(4, 3, [XY(0,0),XY(1,1),XY(0,2),XY(2,3)])
  board.revealCellEffectless(XY(0,1))
  board.revealCellEffectless(XY(0,3))
  board.revealCellEffectless(XY(2,0))
  board
}

/* Combining multiple subset checks
1 ? ? ?
B 2 B ?
? ? 1 ?
*/
def countBoard2() = {
  var board = buildBoard(3, 4, [XY(0,1),XY(2,1)])
  board.revealCellEffectless(XY(0,0))
  board.revealCellEffectless(XY(1,1))
  board.revealCellEffectless(XY(2,2))
  board
}