module src/game

effect Reveal(cell: (Int,Int)): Board
effect GameOver(): Board
effect Flag(cell: (Int,Int)): Board

// for iterating through values
effect Offset(s: Int, e: Int): Int

type Cell {
  Hidden(hasMine: Bool, isFlagged: Bool)
  Revealed(adjacentMines: Int)
}

def infixEq(left: Cell, right: Cell): Bool =
  if (left is Hidden(l1, l2) and right is Hidden(r1, r2)) {
    l1 == r1 && l2 == r2
  } else if (left is Revealed(a) and right is Revealed(b)) {
    a == b
  } else false

record Board(grid: Array[Array[Cell]], rows: Int, cols: Int, mines: Int)

def buildBoard(rows: Int, cols: Int, mines: List[(Int,Int)]): Board = {
  with on[OutOfBounds].panic
  var grid: Array[Array[Cell]] = allocate(rows)
  each(0,rows) {rw =>
    var row: Array[Cell] = allocate(cols)
    each(0,cols) {cl =>
      row.set(cl, Hidden(false, false))
    }
    grid.set(rw, row)
  }
  var board = Board(grid, rows, cols, mines.size())
  mines.foreach() {cell => board.setCell(cell, Hidden(true, false))}
  return board
}

def initializeBoard(rows: Int, cols: Int, mines: Int): Board = {
  var cells: List[(Int,Int)] = empty()
  try {
    val x = do Offset(0, rows)
    val y = do Offset(0, cols)
    cells = cells.append(Cons((x,y),Nil()))
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
  while (cells.size() > mines) {
    val idx = (random() * cells.size().toDouble()).floor()
    cells = cells.deleteAt(idx)
  }
  return buildBoard(rows, cols, cells)
}

def getCell(board: Board, cell: (Int,Int)): Cell = {
  with on[OutOfBounds].panic
  return board.grid.get(cell.first).get(cell.second)
}

def setCell(board: Board, cell: (Int,Int), new_val: Cell): Unit = {
  with on[OutOfBounds].panic
  if (cell is (row,col)) board.grid.get(row).set(col, new_val)
}

def flagCell(board: Board, xy: (Int,Int)): Board / {} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, isFlagged) =>
      board.setCell(xy, Hidden(hasMine, not(isFlagged)))
    case Revealed(_) =>
      println("Cannot flag a revealed cell!")
  }
  board
}

def revealCell(board: Board, xy: (Int,Int)): Board / {GameOver} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, _) =>
      if (hasMine) do GameOver()
      else {
        val adjMines = countAdjacentMines(board, xy)
        board.setCell(xy, Revealed(adjMines))
        if (adjMines == 0) revealAdjacentCells(board, xy) else board
      }
    case _ => board
  }
}

def countAdjacentMines(board: Board, cell: (Int,Int)): Int = {
  var counter = 0
  neighbors(cell, board.rows, board.cols).foreach {
    cel => if (board.getCell(cel) is Hidden(true, _)) counter = counter + 1
  }
  counter
}

def neighbors(cell: (Int,Int), rows: Int, cols: Int): List[(Int, Int)] = {
  var list: List[(Int,Int)] = empty()
  try {
    val dr = do Offset(-1, 2)
    val dc = do Offset(-1, 2)
    val nr = cell.first + dr
    val nc = cell.second + dc
    if ((nr >= 0 && nr < rows && nc >= 0 && nc < cols) and not(equals((dr,dc),(0,0)))) list = Cons((nr,nc),list)
  } with Offset {(s,e) =>
    each(s,e){v => resume(v)}
  }
  list.reverse
}

def revealAdjacentCells(board: Board, cell: (Int,Int)): Board / {GameOver} = {
  neighbors(cell, board.rows, board.cols).foldLeft(board) {
    (b, xy) => revealCell(b, xy)
  }
}