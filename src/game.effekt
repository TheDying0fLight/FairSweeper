module src/game

effect Reveal(cell: (Int,Int)): Board
effect GameOver(): Unit
effect Flag(cell: (Int,Int)): Board

// for resuming with each value with each()
effect Offset(start: Int, end: Int): Int

type Cell {
  Hidden(hasMine: Bool, isFlagged: Bool)
  Revealed(adjacentMines: Int)
}
def infixEq(left: Cell, right: Cell): Bool =
  if (left is Hidden(l1, l2) and right is Hidden(r1, r2)) {
    l1 == r1 && l2 == r2
  } else if (left is Revealed(a) and right is Revealed(b)) {
    a == b
  } else false

record XY(x: Int, y: Int)
def infixEq(left: XY, right: XY): Bool =
  if (left is XY(x1, y1) and right is XY(x2, y2)) {
    x1 == x2 && y1 == y2
  } else false

def show(xy: XY): String = "(" ++ xy.x.show ++ "," ++ xy.y.show ++ ")"

record Board(grid: Array[Array[Cell]], rows: Int, cols: Int, mines: Int)

def getXY(board: Board) {f: Cell => Bool}: List[XY] = {
  var acc: List[XY] = empty()
  board.foreach{ (xy, cell) =>
    if (f(cell)) acc = acc.append(Cons((xy), Nil()))
  }
  acc
}

def foreach(board: Board) {f: (XY, Cell) => Unit}: Unit= {
  try {
    val x = do Offset(0, board.cols)
    val y = do Offset(0, board.rows)
    val xy = XY(x,y)
    val cell = board.getCell(xy)
    f(xy, cell)
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
}

def buildBoard(rows: Int, cols: Int, mines: List[XY]): Board = {
  with on[OutOfBounds].panic
  var grid: Array[Array[Cell]] = allocate(rows)
  each(0,rows) {rw =>
    grid.set(rw, array(cols, Hidden(false, false)))
  }
  var board = Board(grid, rows, cols, mines.size())
  mines.foreach{cell => board.setCell(cell, Hidden(true, false))}
  return board
}

def initializeBoard(rows: Int, cols: Int, mines: Int): Board = {
  var cells: List[XY] = empty()
  try {
    val x = do Offset(0, rows)
    val y = do Offset(0, cols)
    cells = cells.append(Cons(XY(x,y),Nil()))
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
  while (cells.size() > mines) {
    val idx = (random() * cells.size().toDouble()).floor()
    cells = cells.deleteAt(idx)
  }
  return buildBoard(rows, cols, cells)
}

def getCell(board: Board, xy: XY): Cell = {
  with on[OutOfBounds].panic
  return board.grid.get(xy.y).get(xy.x)
}

def setCell(board: Board, xy: XY, new_val: Cell): Unit = {
  with on[OutOfBounds].panic
  board.grid.get(xy.y).set(xy.x, new_val)
}

def flagCell(board: Board, xy: XY): Board / {} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, isFlagged) =>
      board.setCell(xy, Hidden(hasMine, not(isFlagged)))
    case Revealed(_) =>
      println("Cannot flag a revealed cell!")
  }
  board
}

def revealCell(board: Board, xy: XY): Unit / {GameOver} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, _) =>
      if (hasMine) do GameOver()
      else {
        val adjMines = countAdjacentMines(board, xy)
        board.setCell(xy, Revealed(adjMines))
        if (adjMines == 0) revealAdjacentCells(board, xy)
      }
    case _ => ()
  }
}

def countAdjacentMines(board: Board, xy: XY): Int = {
  var counter = 0
  board.neighbors(xy).foreach{cel =>
    if (board.getCell(cel) is Hidden(true, _)) counter = counter + 1
  }
  counter
}

def neighbors(board: Board, xy: XY): List[XY] = {
  var list: List[XY] = empty()
  try {
    val dr = do Offset(-1, 2)
    val dc = do Offset(-1, 2)
    val nr = xy.y + dr
    val nc = xy.x + dc
    if ((nr >= 0 && nr < board.rows && nc >= 0 && nc < board.cols) and not(equals((dc,dr),(0,0))))
      list = Cons(XY(nc,nr),list)
  } with Offset {(s,e) =>
    each(s,e){v => resume(v)}
  }
  list.reverse
}

def revealAdjacentCells(board: Board, xy: XY): Unit / {GameOver} = {
  board.neighbors(xy).foreach{ xy => board.revealCell(xy) }
}