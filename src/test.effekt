module src/test

import test
import src/game
import src/solver
import src/boards
import src/utils
import src/main

// ----------------------------- GAME ---------------------------
def testFlagCell() = {
  val board = simpleBoard1()
  val xy = XY(2,3)
  val updatedBoard = flagCell(board, xy)
  do assert(equals(updatedBoard.getCell(xy), Hidden(false,true)), "Flagging failed")
  val toggledBoard = flagCell(updatedBoard, xy)
  do assert(equals(toggledBoard.getCell(xy), Hidden(false,false)), "Removing flag failed")
}

def testRevealCell() = {
  val board = simpleBoard1()
  try {
    revealCell(board, XY(0, 0))
    do assert(board.getCell(XY(0, 0)) match {
      case Revealed(_) => true
      case _           => false
    }, "Reveal failed")
    revealCell(board, XY(2, 2))
    do assert(false, "Reveal failed to trigger GameOver for mine")
  } with GameOver {
    println("GameOver correctly triggered")
  }
}

def testCountAdjacentMines() = {
  val board = simpleBoard1()
  val count = countAdjacentMines(board, XY(2, 3))
  do assert(count == 2, "Incorrect adjacent mine count")
}

def testCollectWithXY() = {
  val board = simpleBoard1()
  val collectedCells = getXY(board) {
    case Hidden(true, _) => true
    case _               => false
  }
  val res = collectedCells.all() {
    case XY(2,2) => true
    case XY(3,3) => true
    case _ => false
  }
  do assert(res, "collectWithXY failed to collect the correct cells")
}

// ---------------------- SOLVER -----------------------------
def testSolve() = {
  val board = simpleBoard2()
  var moves: List[XY] = empty()
  try {
    board.getMoves() match {
      case (moves, _) => do assert(moves.size == 0, "Solver should return no moves")
    }
    ()
  }
  with QuickMoves {_ => resume(())}
}

def testHiddenNeighbors() = {
  val board = simpleBoard2()
  val neighbors = getHiddenNeighbors(board, XY(1, 1))
  do assert(neighbors.size == 8, "Should find 8 unrevealed neighbors for (1, 1)")
  do assert(neighbors.any{xy => xy == XY(0, 0)}, "Should include top-left neighbor")
  do assert(neighbors.any{xy => xy == XY(2, 2)}, "Should include bottom-right neighbor")
}

def testRemoveMine() = {
  var board = simpleBoard2()
  board.removeMine(XY(0, 0))
  do assert(board.getCell(XY(0, 0)) == Revealed(0), "Bomb revealed")
  do assert(board.getCell(XY(0, 1)) == Hidden(false, false), "Hidden cells stay hidden")
  do assert(board.getCell(XY(1, 1)) == Revealed(0), "Should update mine count in neighbors")
}

def testIntersection() = {
  val l1: List[XY] = Cons(XY(0,0),Cons(XY(1,0),Cons(XY(0,1),Nil())))
  val l2: List[XY] = Cons(XY(0,1),Nil())
  val intersection = l1.getIntersection(l2)
  do assert(intersection.any{xy => xy == XY(0,1)}, "Intersection should be XY(0,1)")
}

def testDifference() = {
  val l1: List[XY] = Cons(XY(0,0),Cons(XY(1,0),Cons(XY(0,1),Nil())))
  val l2: List[XY] = Cons(XY(0,1),Nil())
  val intersection = l1.getDifference(l2)
  do assert(intersection.any{xy => xy == XY(0,0)}, "Difference should contain XY(0,0)")
  do assert(intersection.any{xy => xy == XY(1,0)}, "Difference should contain XY(1,0)")
}

def testSubset() = {
  val l1: List[XY] = Cons(XY(0,0),Cons(XY(1,0),Cons(XY(0,1),Nil())))
  val l2: List[XY] = Cons(XY(0,1),Nil())
  do assert(l2.isSubset(l1), "l2 is a subset of l1")
}

def testSolver(board: Board, amtMoves: Int, expMove: XY, expMine: XY) = {
  try {
    board.getMoves() match {
      case (moves,mines) =>
        if (not(expMove == XY(-1,-1))) do assert(moves.any{xy => xy == expMove}, "A move should be at (" ++ expMove.x.show ++ "," ++ expMove.y.show ++ ")")
        if (not(expMine == XY(-1,-1))) do assert(mines.any{xy => xy == expMine}, "A mine should be at (" ++ expMine.x.show ++ "," ++ expMine.y.show ++ ")")
        do assert(moves.size == amtMoves, "Expected: " ++ amtMoves.show ++ " possible move(s), but got " ++ moves.size.show)
    }
    ()
  }
  with QuickMoves {_ => resume(())}}

// reduced function for simpler function calls
def testSolver(board: Board, amtMoves: Int, expMine: XY) = testSolver(board, amtMoves, XY(-1,-1), expMine)
def testSolver(board: Board, amtMoves: Int) = testSolver(board, amtMoves, XY(-1,-1))

def runTests() = {
  println("Running tests...")
  suite("Fairsweeper Game") {
    test("FlagCell"){testFlagCell()}
    test("RevealCell"){testRevealCell()}
    test("AdjacentMines"){testCountAdjacentMines()}
    test("CollectCells"){testCollectWithXY()}
    }
  suite("Solver") {
    test("UnrevealedNeighbors"){testHiddenNeighbors()}
    test("RemoveMine"){testRemoveMine()}
    test("CalcIntersection"){testIntersection()}
    test("CalcDifference"){testDifference()}
    test("IsSubset"){testSubset()}
    test("NoSureMove"){testSolver(simpleBoard2(), 0)}
    test("SolveSurrounded"){testSolver(surroundedBoard(), 1, XY(0,0), XY(0,1))}
    test("SolveSubsetMap1"){testSolver(subsetBoard1(), 2, XY(0,2), XY(1,2))}
    test("SolveSubsetMap2"){testSolver(subsetBoard2(), 2, XY(2,2), XY(0,2))}
    test("SolveSubsetMap3"){testSolver(subsetBoard3(), 2, XY(0,2), XY(-1,-1))}
    test("SolveSubsetMap4"){testSolver(subsetBoard4(), 0)}
    test("SolveSubsetMap5"){testSolver(subsetBoard5(), 0)}
    test("SolveDifferenceMap1"){testSolver(differenceBoard1(), 1, XY(1,2), XY(0,2))}
    test("SolveDifferenceMap2"){testSolver(differenceBoard2(), 5, XY(5,0), XY(2,0))}
    test("SolveDifferenceMap3"){testSolver(differenceBoard3(), 2, XY(2,2), XY(0,0))}
    test("SolveDifferenceMap4"){testSolver(differenceBoard4(), 2, XY(2,1), XY(0,0))}
    test("SolveDifferenceMap5"){testSolver(differenceBoard5(), 0, XY(0,2))}
  }
  println("All tests passed!")
}

def main() = runTests()
