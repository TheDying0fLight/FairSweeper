module src/probabilitySolver

import src/game
import src/utils
import src/main
import src/solver

effect MaybeMine(): Bool
effect PlaceMMines(xy: XY, board: Board): Board

def getProbabilities(board: Board): List[(XY,Double)] = {
  val board = board.copy
  board.hideHiddenInfo
  val numbers = board.getXY{
    case Revealed(count) and count > 0 => true
    case _ => false
  }
  val relevantCells = numbers.collect{ xy =>
    Some(board.getHiddenNeighbors(xy))
  }.flatMap{l => l}.removeDuplicates
  println(relevantCells)
  var probs: List[(XY,Double)] = empty()
  var boardAmount = 0
  var validBoards: List[List[XY]] = empty()
  try {
    numbers.all{ xy =>
      var newBoard = board.copy
      do PlaceMMines(xy, newBoard)
      false
    }
  } with PlaceMMines { (xy,board) =>
    <>
  }
  probs
}

def isValid(board: Board, xy: XY) = <>

// def mineCount(board: Board, xy: XY): Int = {
//   val l: List[XY] = board.getNeighbors(xy, 1)
//   l.count[XY]{ xy =>
//     board.getCell(xy) match {
//       case Mine() => true
//       case _ => false
//     }
//   }
// }
// effect PlaceMMines(xy: XY, board: ProbabilityBoard): ProbabilityBoard

// record ProbabilityBoard(grid: Array[Array[ProbCell]], rows: Int, cols: Int, mines: Int)
// type ProbCell {
//   Bomb()
//   Open(mines: Int)
// }

// def copy(board: ProbabilityBoard): ProbabilityBoard = {
//   with on[OutOfBounds].panic
//   var newGrid = board.grid.copy
//   newGrid.foreachIndex{ (index,row) =>
//     newGrid.set(index,row.copy)
//   }
//   ProbabilityBoard(newGrid, board.rows, board.cols, board.mines)
// }

// def fromBoard(board: Board): ProbabilityBoard = {
//   var newGrid: Array[Array[ProbCell]] = allocate(10)

//   ProbabilityBoard(newGrid, board.rows, board.cols, board.mines)
// }

// def getProbabilities(board: Board): List[(XY,Double)] = {
//   var probs: List[(XY,Double)] = empty()
//   var numbers = board.getXY{
//     case Revealed(count) and count > 0 => true
//     case _ => false
//   }
//   var boardAmount = 0
//   var validBoards: List[List[XY]] = empty()
//   try {
//     numbers.all{ xy =>
//       var newBoard = board.copy()
//       do PlaceMMines(xy, newBoard)
//       false
//     }
//   } with PlaceMMines { (xy,board) =>
//     <>
//   }
//   probs
// }