import src/game

effect QuickMoves(moves: List[XY]): Unit

def getMoves(board: Board): List[XY] / {QuickMoves} = {
  var board = board
  var amtMines = board.mines
  var foundMine = true
  var foundMines: List[XY] = empty()
  var moves: List[XY] = empty()
  var numbers = board.getXY{
    case Revealed(count) and count > 0 => true
    case _ => false
  }
  def remMines(mines: List[XY]) = {
    amtMines = amtMines - mines.size()
    foundMines = foundMines.append(mines)
    foundMine = true
    board.removeMines(mines)
  }

  while (foundMine and amtMines > 0) {
    foundMine = false
    // simple solving
    numbers.foreach() {xy =>
      val hiddenNeighbors = board.hiddenNeighbors(xy)
      val count = if (board.getCell(xy) is Revealed(c)) c else 0
      if (hiddenNeighbors.size() == count) remMines(hiddenNeighbors)
    }

    numbers = numbers.collect() {xy =>
      val count = if (board.getCell(xy) is Revealed(c)) c else 0
      count match {
        case 0 =>
          val hiddenNeighbors = board.hiddenNeighbors(xy)
          moves = moves.append(hiddenNeighbors)
          None()
        case _ => Some(xy)
      }
    }
    do QuickMoves(moves)
    // advanced solving
    numbers.foreach() {xy =>
      val mines = board.detectNbMinesByDifference(xy)
      if (mines.size() > 0) remMines(mines)
    }
  }

  if (amtMines == 0) {
    moves = empty()
    board.foreach() { (xy, cell) =>
      cell match {
        case Hidden(_, _) => moves = moves.append(Cons(xy,Nil()))
        case _ => ()
      }
    }
  }
  else numbers.foreach() {xy =>
    if (board.getCell(xy) is Hidden(_,_)) moves = moves.append(Cons(xy,Nil()))
  }
  moves
}

def detectNbMinesByDifference(board: Board, xy: XY): List[XY] = {
  val count = if (board.getCell(xy) is Revealed(c)) c else 0
  var mines: List[XY] = empty()
  val nbs = board.neighbors(xy)
  val hdnbs = board.hiddenNeighbors(xy)
  nbs.foreach{ xy2 =>
    val comp_cell = board.getCell(xy2)
    comp_cell match {
      case Revealed(c) and c > count =>
        val diff = getDifference(board.hiddenNeighbors(xy2), hdnbs)
        if (diff.size() <= c - count) mines = mines.append(diff)
      case _ => ()
    }
  }
  mines
}

def getIntersection(l1: List[XY], l2: List[XY]): List[XY] = {
  l1.collect{xy1 =>
    if (l2.any{xy2 => xy2 == xy1}) Some(xy1)
    else None()
  }
}

def getDifference(l1: List[XY], l2: List[XY]): List[XY] = {
  var diff: List[XY] = empty()
  val intersection = l1.getIntersection(l2)
  l1.collect{xyl =>
    if (not(intersection.any{xyi => xyi == xyl})) Some(xyl)
    else None()
  }
}

def hiddenNeighbors(board: Board, xy: XY): List[XY] = {
  board.neighbors(xy).collect{ xy =>
    board.getCell(xy) match {
      case Hidden(_, _) => Some(xy)
      case _ => None()
    }
  }
}

def removeMine(board: Board, mine: XY): Unit = {
  board.setCell(mine, Revealed(0))
  board.neighbors(mine).foreach{ xy =>
    board.getCell(xy) match {
      case Revealed(count) => board.setCell(xy, Revealed(count - 1))
      case _ => ()
    }
  }
}

def removeMines(board: Board, mines: List[XY]): Unit = {
  mines.foreach{ xy => board.removeMine(xy) }
}