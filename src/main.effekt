module main // must be named same as the file!

import io/console
import src/board
import src/utils

def main() = {
  var board = initializeBoard(4, 4, 3)
  println(clear())

  try {playGame(board)}
  with GameOver {println("Game Over! You hit a mine.")}
  with Won {println("You WON!")}
  with Revealing { xy =>
    println("Revealing cell at (" ++ show(xy.x) ++ ", " ++ show(xy.y) ++ ")")
    resume(())
  }
  with Flagging { xy =>
    println("Flagging cell at (" ++ show(xy.x) ++ ", " ++ show(xy.y) ++ ")")
    resume(())
  }
  println("over")
}

def playGame(board: Board): Unit / {Flagging, Revealing, Won, GameOver} = {
  val board = board
  while (true) {
    println(board, false)
    val input = askUser("Enter action (r x y to reveal, f x y to flag): ")
    println(clear())
    with on[WrongFormat].default{println("Coordinates need to be integer. Try again")}
    input.split(" ") match {
      case Cons("r", Cons(x, Cons(y, _)))  => board.revealCell(XY(x.toInt, y.toInt), true)
      case Cons("f", Cons(x, Cons(y, _))) => board.flagCell(XY(x.toInt, y.toInt))
      case _ => println("Invalid input. Try again.")
    }
  }
}

def askUser(prompt: String): String = {
  with console
  println(prompt)
  do readLine()
}

def println(board: Board, showBombs: Bool): Unit = {
  var str = ""
  var counter = 0
  // str = str ++ "\n"
  str = str ++ "*|"
  each(0, board.cols) {n => str = str ++ show(n) ++ "|"}
  foreach(board.grid) {row =>
    str = str ++ "\n"
    str = str ++ show(counter) ++ "|"
    counter = counter + 1
    foreach(row) {elem =>
      str = str ++ (elem match {
        case Hidden(true, _) and showBombs      => "B"
        case Hidden(_, true)                    => "F"
        case Hidden(_, false)                   => "â—¼"
        case Revealed(count) and (count > 0) => show(count)
        case Revealed(_)                     => " "
        case NoMine() => "N"
        case Mine() => "M"
        case TrueHidden() => "T"
      }) ++ "|"
    }
  }
  println(str)
}

def println(board: Board): Unit = println(board, false)

namespace Escape {
  val CSI = "\u001b["
  def escape(s: String): String = CSI ++ s
  def cursorPosition(x: Int, y: Int): String = escape(y.show ++ ";" ++ x.show ++ "H")
  def eraseDisplay(x: Int): String = escape(x.show ++ "J")
}

def clear(): String = {
  Escape::eraseDisplay(2) ++ Escape::cursorPosition(1, 1)
}