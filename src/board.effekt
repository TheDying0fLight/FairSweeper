import src/utils

effect Reveal(cell: (Int,Int)): Unit
effect GameOver(): Unit
effect Flag(cell: (Int,Int)): Unit
effect Won(): Unit

// for resuming with each value with each()
effect Offset(start: Int, end: Int): Int

record Board(grid: Array[Array[Cell]], rows: Int, cols: Int, mines: Int)

def getCell(board: Board, xy: XY): Cell = {
  with on[OutOfBounds].panic
  return board.grid.get(xy.y).get(xy.x)
}

def setCell(board: Board, xy: XY, new_val: Cell): Unit = {
  with on[OutOfBounds].panic
  board.grid.get(xy.y).set(xy.x, new_val)
}

def buildBoard(rows: Int, cols: Int, mines: List[XY]): Board = {
  with on[OutOfBounds].panic
  var grid: Array[Array[Cell]] = allocate(rows)
  each(0,rows) {rw =>
    grid.set(rw, array(cols, Hidden(false, false)))
  }
  val board = Board(grid, rows, cols, mines.size())
  mines.foreach{cell => board.setCell(cell, Hidden(true, false))}
  return board
}

def getXY(board: Board) {f: Cell => Bool}: List[XY] = {
  board.collect{ (xy, cell) =>
    if (f(cell)) Some(xy)
    else None()
  }
}

def foreach(board: Board) {f: (XY, Cell) => Unit}: Unit = {
  try {
    val x = do Offset(0, board.cols)
    val y = do Offset(0, board.rows)
    val xy = XY(x,y)
    val cell = board.getCell(xy)
    f(xy, cell)
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
}

def collect[A](board: Board) {f: (XY, Cell) => Option[A]}: List[A] = {
  var acc: List[A] = empty()
  board.foreach{ (a,b) =>
    f(a,b) match {
      case Some(v) => acc = Cons(v,acc)
      case None()  => ()
    }
  }
  acc.reverse
}

def copy(board: Board): Board = {
  with on[OutOfBounds].panic
  var newGrid = board.grid.copy
  newGrid.foreachIndex{ (index,row) =>
    newGrid.set(index,row.copy)
  }
  Board(newGrid, board.rows, board.cols, board.mines)
}

def hideHiddenInfo(board: Board): Unit =
  board.foreach{ (xy,cell) =>
    board.getCell(xy) match {
      case Hidden(_,_) => board.setCell(xy, TrueHidden())
      case _ => ()
    }
  }

def revealCell(board: Board, xy: XY): Unit / {GameOver} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, _) =>
      if (hasMine) do GameOver()
      else {
        val adjMines = countAdjacentMines(board, xy)
        board.setCell(xy, Revealed(adjMines))
        if (adjMines == 0) revealAdjacentCells(board, xy)
      }
    case _ => ()
  }
}

def countAdjacentMines(board: Board, xy: XY): Int = {
  var counter = 0
  board.getNeighbors(xy, 1).foreach{cel =>
    if (board.getCell(cel) is Hidden(true, _)) counter = counter + 1
  }
  counter
}

def getNeighbors(board: Board, xy: XY, size: Int): List[XY] = {
  var list: List[XY] = empty()
  try {
    val dr = do Offset(0 - size, size + 1)
    val dc = do Offset(0 - size, size + 1)
    val nr = xy.y + dr
    val nc = xy.x + dc
    if ((nr >= 0 && nr < board.rows && nc >= 0 && nc < board.cols) and not(equals((dc,dr),(0,0))))
      list = Cons(XY(nc,nr),list)
  } with Offset {(s,e) =>
    each(s,e){v => resume(v)}
  }
  list.reverse
}

def getRevealedNeighbors(board: Board, xy: XY): List[XY] = {
  board.getNeighbors(xy, 1).collect{ xy =>
    board.getCell(xy) match {
      case Revealed(_) => Some(xy)
      case _ => None()
    }
  }
}

def revealAdjacentCells(board: Board, xy: XY): Unit / {GameOver} = {
  board.getNeighbors(xy, 1).foreach{ xy => board.revealCell(xy) }
}

def initializeBoard(rows: Int, cols: Int, mines: Int): Board = {
  var cells: List[XY] = empty()
  try {
    val x = do Offset(0, rows)
    val y = do Offset(0, cols)
    cells = cells.append([XY(x,y)])
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
  while (cells.size() > mines) {
    // ?+1 so we can also hit the last cell?
    val idx = (random() * (cells.size() + 1).toDouble()).floor()
    cells = cells.deleteAt(idx)
  }
  return buildBoard(rows, cols, cells)
}

def flagCell(board: Board, xy: XY): Board / {} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, isFlagged) =>
      board.setCell(xy, Hidden(hasMine, not(isFlagged)))
    case Revealed(_) =>
      println("Cannot flag a revealed cell!")
    case _ => <>
  }
  board
}