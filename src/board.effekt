import tty

import src/utils

effect Revealing(cell: XY): Unit
effect Flagging(cell: XY): Unit
effect GameOver(board: Board, move: XY): Unit
effect Won(board: Board): Unit

// for resuming with each value with each()
effect Offset(start: Int, end: Int): Int

record Board(grid: Array[Array[Cell]], rows: Int, cols: Int, mines: Int)

def getCell(board: Board, xy: XY): Cell = {
  with on[OutOfBounds].panic
  board.grid.get(xy.y).get(xy.x)
}

def setCell(board: Board, xy: XY, new_val: Cell): Unit = {
  with on[OutOfBounds].panic
  board.grid.get(xy.y).set(xy.x, new_val)
}

def buildBoard(rows: Int, cols: Int, mines: List[XY]): Board = {
  with on[OutOfBounds].panic
  var grid: Array[Array[Cell]] = allocate(rows)
  each(0,rows) {rw =>
    grid.set(rw, array(cols, Hidden(false, false)))
  }
  val board = Board(grid, rows, cols, mines.size())
  mines.foreach{cell => board.setCell(cell, Hidden(true, false))}
  board
}

def initializeBoard(rows: Int, cols: Int, mines: Int): Board = {
  var cells: List[XY] = empty()
  try {
    val x = do Offset(0, cols)
    val y = do Offset(0, rows)
    cells = cells.append([XY(x,y)])
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
  while (cells.size > mines) {
    val idx = randInt(0, cells.size)
    cells = cells.deleteAt(idx)
  }
  buildBoard(rows, cols, cells)
}

def getXY(board: Board) {f: Cell => Bool}: List[XY] =
  board.collect{ (xy, cell) => if (f(cell)) Some(xy) else None() }

def foreach(board: Board) {f: (XY, Cell) => Unit}: Unit = {
  try {
    val x = do Offset(0, board.cols)
    val y = do Offset(0, board.rows)
    val xy = XY(x,y)
    val cell = board.getCell(xy)
    f(xy, cell)
  } with Offset {(s,e) =>
    each(s,e) {v => resume(v)}
  }
}

def collect[A](board: Board) {f: (XY, Cell) => Option[A]}: List[A] = {
  var acc: List[A] = empty()
  board.foreach{ (a,b) =>
    f(a,b) match {
      case Some(v) => acc = Cons(v,acc)
      case None()  => ()
    }
  }
  acc.reverse
}

def copy(board: Board): Board = {
  with on[OutOfBounds].panic
  var newGrid = board.grid.copy
  newGrid.foreachIndex{ (index,row) =>
    newGrid.set(index,row.copy)
  }
  Board(newGrid, board.rows, board.cols, board.mines)
}

def revealCell(board: Board, xy: XY, first: Bool, safe: Bool): Unit / {GameOver, Won, Revealing} =
  board.getCell(xy) match {
    case Hidden(hasMine, _) =>
      if (first) do Revealing(xy)
      if (hasMine) {
        if (board.getRevealed.size > 0) do GameOver(board, xy)
        val hiddenNoMine = board.getSafeHidden
        with on[OutOfBounds].panic
        board.setCell(hiddenNoMine.get(randInt(0,hiddenNoMine.size)), Hidden(true,false))
        board.setCell(xy, Hidden(false,false))
      }
      val adjMines = countAdjacentMines(board, xy)
      board.setCell(xy, Revealed(adjMines))
      if (adjMines == 0) revealAdjacentCells(board, xy)
      val hidden = board.getXY{
        case Hidden(_,_) => true
        case _ => false
      }
      if (hidden.size == board.mines) do Won(board)
    case _ => ()
  }
def revealCellEffectless(board: Board, xy: XY): Unit / {} =
  try {board.revealCell(xy,false,false)}
  with GameOver {(_,_) => println("Effectless reveal game over");<>}
  with Won {_ => ()}
  with Revealing {_ => resume(())}

def revealAdjacentCells(board: Board, xy: XY): Unit =
  board.getNeighbors(xy).foreach{ xy => board.revealCellEffectless(xy) }

def countAdjacentMines(board: Board, xy: XY): Int =
  board.getNeighbors(xy).collect{cel =>
    if (board.getCell(cel) is Hidden(true, _)) Some(xy)
    else None()
  }.size

def flagCell(board: Board, xy: XY): Unit / {Flagging} = {
  val cell = board.getCell(xy)
  cell match {
    case Hidden(hasMine, isFlagged) =>
      do Flagging(xy)
      board.setCell(xy, Hidden(hasMine, not(isFlagged)))
    case Revealed(_) =>
      println("Cannot flag a revealed cell!")
    case _ => <>
  }
}
def flagCellEffectless(board: Board, xy: XY): Unit / {} =
  try {board.flagCell(xy)}
  with Flagging {_ => resume(())}

def println(board: Board, showBombs: Bool): Unit = {
  var str = ""
  var counter = 0
  // str = str ++ "\n"
  str = str ++ "*|"
  each(0, board.cols) {n => str = str ++ n.mod(10).show ++ "|"}
  with Formatted::formatting
  foreach(board.grid) {row =>
    str = str ++ "\n"
    str = str ++ counter.mod(10).show ++ "|"
    counter = counter + 1
    foreach(row) {elem =>
      str = str ++ (elem match {
        case Hidden(_, true)                 => magenta("F")
        case Hidden(true, _) and showBombs   => red("✸")
        case Hidden(_, false)                => yellow("◼")
        case Revealed(count) and (count > 0) => green(count.show)
        case Revealed(_)                     => " "
        // for solver visualization
        case NoMine()                        => "N"
        case Mine()                          => red("M")
        case SHidden()                       => cyan("H")
        case Relevant()                      => magenta("R")
        case SRevealed(c,_) and (c == 0)     => " "
        case SRevealed(c,h)                  => green(c.show)
      }) ++ "|"
    }
  }
  println(str)
}
def println(board: Board): Unit = println(board, false)

// hide mine info for solver just to be sure
def hideHiddenInfo(board: Board): Unit =
  board.foreach{ (xy,cell) =>
    board.getCell(xy) match {
      case Hidden(_,_) => board.setCell(xy, SHidden())
      case Revealed(c) => board.setCell(xy, SRevealed(c, getHiddenNeighbors(board, xy).size))
      case _ => ()
    }
  }

def removeMine(board: Board, mine: XY): Bool = {
  board.setCell(mine, Mine())
  board.getNeighbors(mine).all{ xy =>
    board.getCell(xy) match {
      case SRevealed(count, hdnbs) =>
        board.setCell(xy, SRevealed(count - 1, hdnbs - 1))
        count > 0 && hdnbs >= count
      case _ => true
    }
  }
}

def removeMove(board: Board, move: XY): Bool = {
  board.setCell(move, NoMine())
  board.getNeighbors(move).all{ xy =>
    board.getCell(xy) match {
      case SRevealed(count, hdnbs) =>
        board.setCell(xy, SRevealed(count, hdnbs - 1))
        count >= 0 && hdnbs - 1 >= count
      case _ => true
    }
  }
}

// ------------------------- GETTER ------------------------
def getRevealedNeighbors(board: Board, xy: XY): List[XY] =
  board.getNeighbors(xy).collect{ xy =>
    board.getCell(xy) match {
      case Revealed(_) => Some(xy)
      case SRevealed(_,_) => Some(xy)
      case _ => None()
    }
  }

def getHiddenNeighbors(board: Board, xy: XY): List[XY] =
  board.getNeighbors(xy).collect{ xy =>
    board.getCell(xy) match {
      case Hidden(_,_) => Some(xy)
      case SHidden() => Some(xy)
      case _ => None()
    }
  }

def getMineNeighbors(board: Board, xy: XY): List[XY] =
  board.getNeighbors(xy).collect{ xy =>
    board.getCell(xy) match {
      case Mine() => Some(xy)
      case _ => None()
    }
  }

def getMines(board: Board): List[XY] =
  board.getXY{
    case Mine() => true
    case Hidden(true,_) => true
    case _ => false
  }

def getSafeHidden(board: Board): List[XY] =
  board.getXY{
    case Hidden(false,_) => true
    case SHidden() => true
    case _ => false
  }

def getRevealed(board: Board): List[XY] =
  board.getXY{
    case Revealed(_) => true
      case SRevealed(_,_) => true
    case _ => false
  }

def getNeighbors(board: Board, xy: XY, size: Int): List[XY] = {
  var list: List[XY] = empty()
  try {
    val dr = do Offset(0 - size, size + 1)
    val dc = do Offset(0 - size, size + 1)
    val nr = xy.y + dr
    val nc = xy.x + dc
    if ((nr >= 0 && nr < board.rows && nc >= 0 && nc < board.cols) and not(equals((dc,dr),(0,0))))
      list = Cons(XY(nc,nr),list)
  } with Offset {(s,e) =>
    each(s,e){v => resume(v)}
  }
  list.reverse
}
val offsets = [(0,1),(1,0),(1,1),(0,-1),(-1,0),(-1,-1),(1,-1),(-1,1)]
def getNeighbors(board: Board, xy: XY): List[XY] =
  offsets.collect{case (dx,dy) =>
    val nx = xy.x + dx
    val ny = xy.y + dy
    if (nx >= 0 && nx < board.cols && ny >= 0 && ny < board.rows) Some(XY(nx,ny))
    else None()
  }